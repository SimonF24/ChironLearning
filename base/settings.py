"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['CHIRON_LEARNING_SECRET_KEY'] #Replace with hardcoded value before deployment

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOCAL_DATABASE = True

ALLOWED_HOSTS = ['localhost', 'www.chironlearning.com']

# Application definitions

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'main.apps.MainConfig',
    'pages.apps.PagesConfig',

    # Third Party Apps
    'constrainedfilefield',
    'django_comments.apps.CommentsConfig',
    'djangoratings',
    'session_security'
]

SITE_ID = '1'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # Third Party Middleware
    'session_security.middleware.SessionSecurityMiddleware',
]

ROOT_URLCONF = 'base.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'base.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

if 'RDS_HOSTNAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT']
        }
    }
elif LOCAL_DATABASE==False:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ['PRODUCTION_DATABASE_NAME'],
            'USER': os.environ['PRODUCTION_DATABASE_USER'],
            'PASSWORD': os.environ['PRODUCTION_DATABASE_PASSWORD'],
            'HOST': os.environ['PRODUCTION_DATABASE_HOST'],
            'PORT': os.environ['PRODUCTION_DATABASE_PORT'],
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'Testing',
            'USER': 'postgres',
            'PASSWORD': '', # Test password
            'HOST': '127.0.0.1',
            'PORT': '5432',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'www', 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

#AWS SES Settings

EMAIL_HOST = os.environ['AWS_EMAIL_HOST'] #Replace with hardcoded values before deployment
EMAIL_HOST_USER = os.environ['AWS_EMAIL_USER']
EMAIL_HOST_PASSWORD = os.environ['AWS_EMAIL_PASSWORD']
EMAIL_PORT = os.environ['AWS_EMAIL_PORT']
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'support@chironlearning.com'
DEFAULT_TO_EMAIL = 'support@chironlearning.com'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

SERVER_EMAIL = 'site@chironlearning.com'

#Custom User Model

AUTH_USER_MODEL = 'main.User'

#Named URL's that Django's auth_views reference
LOGIN_URL = 'main:login'
LOGOUT_REDIRECT_URL = 'main:logout-success'

ADMINS = [('Simon Fraser', 'simon@chironlearning.com')]

# Slight model of Django's default logging to set include_html=True in the main_admins handler and stop incessant emails
# Django's default logging is in django/utils/log.py
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html':True,
        }
    },
    'loggers': { 
        'django.security.DisallowedHost': { #A better solution should be found here instead of just blocking the emails
            'handlers':['mail_admins'],
            'level':'CRITICAL',
            'propagate':False,
        },
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': 'INFO',
        },
        'django.server': {
            'handlers': ['django.server'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}

#Security Settings
#SECURE_SSL_REDIRECT taken care of by AWS 
if DEBUG == False: #Development server only accepts HTTP, not HTTPS
    SESSION_COOKIE_SECURE = True 
    CSRF_COOKIE_SECURE = True 
    X_FRAME_OPTIONS = 'DENY' 
    SECURE_BROWSER_XSS_FILTER = True 
    SECURE_CONTENT_TYPE_NOSNIFF = True 
    SECURE_HSTS_SECONDS = 3600
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True

# Session Security Settings
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_SECURITY_EXPIRE_AFTER = 1800 #30 minutes
SESSION_SECURITY_WARN_AFTER = 1500 #25 minutes
